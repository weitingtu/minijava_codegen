# Store the parser files generated by JavaCC
JAVACC_OUTDIR = myparser
JAVACC_FILE = minijava.jj
PARSER = $(JAVACC_OUTDIR)/MiniJavaParser.java

JAVAC_OPTIONS = -Xlint:unchecked

# AST and Visitor source files
AST = $(wildcard syntaxtree/*.java)
VISITOR = $(wildcard visitor/*.java)

# AST and Visitor class files
AST_CLASS = $(AST:.java=.class)
VISITOR_CLASS = $(VISITOR:.java=.class)


all: Main.class MainPrettyPrint.class

Main.class: Main.java $(PARSER) $(AST_CLASS) $(VISITOR_CLASS)
MainPrettyPrint.class: MainPrettyPrint.java $(PARSER) $(AST_CLASS) $(VISITOR_CLASS)

%.class: %.java
	javac $(JAVAC_OPTIONS) $<

$(PARSER): $(JAVACC_FILE) 
	# Create the directory if it does not exist
	mkdir -p $(JAVACC_OUTDIR)
	javacc -OUTPUT_DIRECTORY="$(JAVACC_OUTDIR)" $(JAVACC_FILE)
	javac $(JAVAC_OPTIONS) $(JAVACC_OUTDIR)/*.java

clean:
	rm -f *.rpt
	rm -rf $(JAVACC_OUTDIR) *.class
	rm -f syntaxtree/*.class visitor/*.class

test0: test.java
	java Main < test.java > test0.asm
	java -jar test/Mars4_5.jar nc test0.asm

# To check if test.java is syntactically and semantically correct
test1: test.java
	java MainPrettyPrint < test.java 


test_all: 
	rm -f *.rpt
	@for p in BinarySearch BinaryTree BubbleSort Factorial LinearSearch LinkedList QuickSort test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12; do \
		java Main < input/$$p.java > $$p.asm; \
		java -jar test/Mars4_5.jar nc $$p.asm > $$p.rpt; \
		echo "Run $$p"; \
		(diff $$p.rpt golden/$$p.rpt || echo "$$p failed"); \
	done;
	@for p in test0 test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13 test14 test15 test16 test17 test18 test19 test20 test21 test22 test23 test24 test25 test26 test27; do \
		java Main < test/$$p.java > $$p.asm; \
		java -jar test/Mars4_5.jar nc $$p.asm > $$p-csci3120.rpt; \
		echo "Run test/$$p"; \
		(diff $$p-csci3120.rpt golden/$$p-csci3120.rpt || echo "test/$$p failed"); \
	done; 
	rm -f *.rpt
	rm -f *.asm

